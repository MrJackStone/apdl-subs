! ldcomb , comb_coefs , comb_scen , scen_names , hypo_lstid , hypo_lcsid , comb_lcsid , scen_lcsid
! LDCOMB , ARG1       , ARG2      , ARG3       , ARG4       , ARG5       , ARG6       , ARG7

! Description:
! Creates load combinations & envelopes using post-process load cases.
!
! Combinations are created the following way:
!   • Each base hypothesis is saved as a load case;
!   • Each load combination is a load case created by linear combination of the base hypotheses;
!   • Each load combination has combination coefficients and a scenario it belongs to;
!   • Load combinations are grouped by scenario and used to generate three envelope load cases:
!       - MIN (minimum values)
!       - MAX (maximum values)
!       - ABMX (absolute maximum values)
!
! The total number of load cases created (LCS_COUNT), which must respect the maximum of 99, is given
! by the following expresion:
!
!   LCS_COUNT = HYPOTHESIS_COUNT + COMBINATION_COUNT + 3*SCENARIO_COUNT <= 99

! Arguments:
! ARG1: comb_coefs  -  name of 2-D array containing combination coefficients for each combination
!                      for each base hypothesis
! ARG2: comb_scen   -  name of 1-D char array containing the name of the scenario that each
!                      combination belongs to
! ARG3: scen_names  -  name of 1-D char array containing the name of each scenario
! ARG4: hypo_lstid  -  name of 1-D array listing the load step indices of each base hypothesis
! ARG5: hypo_lcsid  -  name of 1-D array listing the load case index assigned to each base
!                      hypothesis
! ARG6: comb_lcsid  -  name of 1-D array listing the load case index assigned to each load
!                      combination created
! ARG7: scen_lcsid  -  name of 2-D array listing the load case index assigned to each of the three
!                      envelopes (min, max, and abmx) created for each scenario

! Local parameters:
! ar20: parType
! ar30: lcsIndex
! ar40: hypothesisCount
! ar41: hypothesisLst
! ar50: combinationCount
! ar51: nthCombination
! ar52: combCoefficient
! ar60: scenarioCount
! ar61: cmbScenario
! ar62: nthScenario
! ar63: scenMinIndex
! ar64: scenMaxIndex
! ar65: scenAbsIndex
! ar66: scenName


! Parse inputs
*get,ar20,parm,ARG1,type
*if,ar20,ne,3,then
  *msg,error
LDCOMB error: expected ARG1 to be a string.%/&
LDCOMB command is ignored.
  *return,-1
*endif

*get,ar20,parm,%ARG1%,type
*if,ar20,ne,1,then
  *msg,error
LDCOMB error: expected ARG1 to be the name of a MxN array parameter containing load combination coefficients.%/&
LDCOMB command is ignored.
  *return,-1
*endif

*get,ar20,parm,ARG2,type
*if,ar20,ne,3,then
  *msg,error
LDCOMB error: expected ARG2 to be a string.%/&
LDCOMB command is ignored.
  *return,-1
*endif

*get,ar20,parm,%ARG2%,type
*if,ar20,ne,4,then
  *msg,error
LDCOMB error: expected ARG2 to be the name of a char array parameter containing scenario names.%/&
LDCOMB command is ignored.
  *return,-1
*endif

*get,ar20,parm,ARG3,type
*if,ar20,ne,3,then
  *msg,error
LDCOMB error: expected ARG3 to be a string.%/&
LDCOMB command is ignored.
  *return,-1
*endif

*get,ar20,parm,%ARG3%,type
*if,ar20,ne,4,then
  *msg,error
LDCOMB error: expected ARG3 to be the name of a char array parameter listing all scenario names.%/&
LDCOMB command is ignored.
  *return,-1
*endif

*get,ar20,parm,ARG4,type
*if,ar20,ne,3,then
  *msg,error
LDCOMB error: expected ARG4 to be a string.%/&
LDCOMB command is ignored.
  *return,-1
*endif

*get,ar20,parm,%ARG4%,type
*if,ar20,ne,4,then
  *msg,error
LDCOMB error: expected ARG4 to be the name of an array parameter listing load step indices of each base hypothesis.%/&
LDCOMB command is ignored.
  *return,-1
*endif

*get,ar20,parm,ARG5,type
*if,ar20,ne,3,then
  *msg,error
LDCOMB error: expected ARG5 to be a string.%/&
LDCOMB command is ignored.
  *return,-1
*endif

*get,ar20,parm,%ARG5%,type
*if,ar20,ne,4,then
  *msg,error
LDCOMB error: expected ARG5 to be the name of an array parameter giving load case indices for each base hypothesis.%/&
LDCOMB command is ignored.
  *return,-1
*endif

*get,ar20,parm,ARG6,type
*if,ar20,ne,3,then
  *msg,error
LDCOMB error: expected ARG6 to be a string.%/&
LDCOMB command is ignored.
  *return,-1
*endif

*get,ar20,parm,%ARG6%,type
*if,ar20,ne,4,then
  *msg,error
LDCOMB error: expected ARG6 to be the name of an array parameter giving load case indices for each combination created.%/&
LDCOMB command is ignored.
  *return,-1
*endif

*get,ar20,parm,ARG7,type
*if,ar20,ne,3,then
  *msg,error
LDCOMB error: expected ARG7 to be a string.%/&
LDCOMB command is ignored.
  *return,-1
*endif

*get,ar20,parm,%ARG7%,type
*if,ar20,ne,4,then
  *msg,error
LDCOMB error: expected ARG7 to be the name of a 3xN array parameter giving load case indices for MIN/MAX/ABMX envelopes of each scenario.%/&
LDCOMB command is ignored.
  *return,-1
*endif

! Collect table sizes
*get , hypothesisCount  , parm , hypo_lstid , dim , x
*get , combinationCount , parm , comb_coefs , dim , y
*get , scenarioCount    , parm , scen_names , dim , x

! Build base hypotheses
*do,nthHypothesis,1,hypothesisCount,1
  hypothesisLst = hypo_lstid(nthHypothesis)
  lcsIndex = hypo_lcsid(nthHypothesis)
  lcdef,lcsIndex,hypothesisLst
*enddo

! Build combinations
*do,nthCombination,1,combinationCount,1

  lczero

  *do,nthHypothesis,1,hypothesisCount,1
    combCoefficient = comb_coefs(nthHypothesis,nthCombination)
    *if,combCoefficient,eq,0,cycle
    lcfact,nthHypothesis,combCoefficient
    lcoper,add,nthHypothesis
    lcfact
  *enddo

  lcsIndex = comb_lcsid(nthCombination)
  lcwrite,lcsIndex

*enddo

! Build envelopes
*do,nthScenario,1,scenarioCount,1

  scenMinIndex = scen_lcsid(1,nthScenario)
  scenMaxIndex = scen_lcsid(2,nthScenario)
  scenAbsIndex = scen_lcsid(3,nthScenario)
  scenName     = scen_names(nthScenario)

  lczero
  lcwrite,scenMinIndex
  lcwrite,scenMaxIndex
  lcwrite,scenAbsIndex

  *do,nthCombination,1,combinationCount,1
    cmbScenario = comb_scen(nthScenario)
    lcsIndex    = comb_lcsid(nthCombination)

    *if,upcase(cmbScenario),ne,upcase(scenName),cycle

    lcase,scenMinIndex
    lcoper,min,lcsIndex
    lcwrite,scenMinIndex

    lcase,scenMaxIndex
    lcoper,max,lcsIndex
    lcwrite,scenMaxIndex

    lcase,scenAbsIndex
    lcoper,abmx,lcsIndex
    lcwrite,scenAbsIndex
  *enddo

*enddo
