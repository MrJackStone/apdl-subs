!! TODO: merge with `LOCSORT`

! ndsort, dir, order, nodeNumbersParm, xCoordParm, yCoordParm, zCoordParm
! ndsort, arg1, arg2,            arg3,       arg4,       arg5,       arg6

! Description:
! Sorts selected nodes (in ascending or descending order) in an array based on the value of one
! nodal coordinate.

! Arguments:
! arg1: dir              -  chosen coordinate: 'X', 'Y' or 'Z' (defaults to 'X')
! arg2: order            -  sorting order: 'A' (ascending, default) or 'D' (descending)
! arg3: nodeNumbersParm  -  name of array parameter in which node numbers will be stored
!                           Default: NDSORT_ARR_nodes
! arg4: xCoordParm       -  name of array parameter in which x coordinates will be stored
!                           Default: NDSORT_ARR_xcoord
! arg5: yCoordParm       -  name of array parameter in which y coordinates will be stored
!                           Default: NDSORT_ARR_ycoord
! arg6: zCoordParm       -  name of array parameter in which z coordinates will be stored
!                           Default: NDSORT_ARR_zcoord

! Local parameters:
! AR20: parType
! AR21: sortCartesianDirection
! AR22: nodeCount
! AR23: sortOrder
! AR24: dirIndex

! Global parameters (erased at the end of this subroutine):
! NDSORT_ARR_data
! NDSORT_ARR_temp

! Output parameters:
! %arg3% (defaults to 'NDSORT_ARR_nodes')
! %arg4% (defaults to 'NDSORT_ARR_xcoord')
! %arg5% (defaults to 'NDSORT_ARR_ycoord')
! %arg6% (defaults to 'NDSORT_ARR_zcoord')


! Back up current environment
mpopbackup
obackup
/uis,msgpop,3

! Set argument defaults
AR23='A'
*get,AR20,parm,arg2,type
*if,AR20,eq,3,then
  AR23=upcase(arg2)
*endif

AR21='X'
*get,AR20,parm,arg1,type
*if,AR20,eq,3,then
  AR21=upcase(arg1)
*endif

! Get names for output parameters
AR93='NDSORT_ARR_nodes'
*get,AR20,parm,arg3,type
*if,AR20,eq,3,then
  AR93=arg3
*endif

AR94='NDSORT_ARR_xcoord'
*get,AR20,parm,arg4,type
*if,AR20,eq,3,then
  AR94=arg4
*endif

AR95='NDSORT_ARR_ycoord'
*get,AR20,parm,arg5,type
*if,AR20,eq,3,then
  AR95=arg5
*endif

AR96='NDSORT_ARR_zcoord'
*get,AR20,parm,arg6,type
*if,AR20,eq,3,then
  AR96=arg6
*endif

! Get axis direction index
*if,AR21,eq,'X',then
  AR24=2
*elseif,AR21,eq,'Y',then
  AR24=3
*elseif,AR21,eq,'Z',then
  AR24=4
*endif

! Count selected nodes, initialize related arrays
*get,AR22,node,,count

*del , NDSORT_ARR_data ,  , nopr
*dim , NDSORT_ARR_data ,  , AR22 , 4

! Extract nodal coordinates
*vget , NDSORT_ARR_data(1 , 1) , node ,  , nlist
*vget , NDSORT_ARR_data(1 , 2) , node ,  , loc   , x
*vget , NDSORT_ARR_data(1 , 3) , node ,  , loc   , y
*vget , NDSORT_ARR_data(1 , 4) , node ,  , loc   , z

! Sort Nx4 matrix in ascending order of the chosen coordinate
*moper,NDSORT_ARR_temp,NDSORT_ARR_data,sort,,AR24

! Transfer listing data from table to arrays
*vfun , %AR93% , copy , NDSORT_ARR_data(1 , 1)
*vfun , %AR94% , copy , NDSORT_ARR_data(1 , 2)
*vfun , %AR95% , copy , NDSORT_ARR_data(1 , 3)
*vfun , %AR96% , copy , NDSORT_ARR_data(1 , 4)

! Reverse order if descending sort was requested
*if,AR23,eq,'D',then
  arrreverse,,AR93
  arrreverse,,AR94
  arrreverse,,AR95
  arrreverse,,AR96
*endif

! Clean up
*del,NDSORT_ARR_data,,nopr
*del,NDSORT_ARR_temp,,nopr
mpoprestore

/eof

! Remove the eof above for backwards compatibility
*del,NDSORT_ARR_NDList,,nopr
*del,NDSORT_ARR_CoordList,,nopr
*dim,NDSORT_ARR_NDList,,AR22
*dim,NDSORT_ARR_CoordList,,AR22

*vfun,NDSORT_ARR_NDList,copy,%AR93%(1)

*if,upcase(arg1),eq,'X',then
  *vfun,NDSORT_ARR_CoordList,copy,%AR94%(1)
*elseif,upcase(arg1),eq,'Y',then
  *vfun,NDSORT_ARR_CoordList,copy,%AR95%(1)
*elseif,upcase(arg1),eq,'Z',then
  *vfun,NDSORT_ARR_CoordList,copy,%AR96%(1)
*endif

mpopbackup
/msgpop,uis,0
*msg,warn
NDSORT warn: you are using a DEPRECATED version of NDSORT!%/&
***** Repent, sinner! *****
/wait,3
mpoprestore
