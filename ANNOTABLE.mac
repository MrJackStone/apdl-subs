! ANNOTABLE, data_values, row_labels, column_headers, tableTitle, xllc, yllc, cellAlignment
! ANNOTABLE,        ARG1,       ARG2,           ARG3,       ARG4, ARG5, ARG6,          ARG7

! Description:
! Draws a table filled with data passed as arrays of characters.

! Arguments:
! ARG1: data_values    -  2D array parameter of strings with value of every data field of the table.
!                         An array of chars can also be provided (will be converted to string array)
!                         Format: (248 , row , col)
! ARG2: row_labels     -  array parameter of strings with label of each row (optional).
!                         An array of chars can also be provided (will be converted to string array)
!                         Format: (248 , row)
! ARG3: column_headers -  array parameter of strings with header of each column (optional).
!                         An array of chars can also be provided (will be converted to string array)
!                         Format: (248 , col)
! ARG4: tableTitle     -  table's title, written above it (optional)
! ARG5: xllc           -  X coordinate (in window display units) of the table's lower left corner
!                         (defaults to 0.0)
! ARG6: yllc           -  Y coordinate (in window display units) of the table's lower left corner
!                        (defaults to 0.0)
! ARG7: cellAlignment  -  horizontal placement of text within each cell:
!                            [0] left-justified
!                            [1] centered
!                            [2] right-justified

! Local parameters:
! ar20: parType
! ar21: horizontalMargin
! ar22: rowHeight
! ar23: colWidth
! ar24: verticalMargin
! ar25: dataRowCount
! ar26: dataColCount
! ar27: tableRowCount
! ar28: tableColCount
! ar29: firstDataRow
! ar30: firstDataCol
! ar31: verAdjustment
! ar32: hasRowLabels
! ar33: hasColumnHeaders
! ar34: correspTableRow
! ar35: correspTableCol
! ar37: charCount
! ar38: maxCharCount
! ar39: string
! ar40: totalHeight
! ar41: totalWidth
! ar42: nthRow
! ar43: nthCol
! ar44: xprev
! ar45: xNthCell
! ar46: ymax
! ar50: titleCharCount
! ar51: titleWidth
! ar52: titleLeftPadding
! ar55: xTitle
! ar56: yTitle

! Global parameters (erased at the end of this subroutine):
! ANNOTABLE_ARR_colWidths
! ANNOTABLE_ARR_rowHeights
! ANNOTABLE_ARR_labelRowHeights
! ANNOTABLE_ARR_labelColWidths
! ANNOTABLE_VAR_charWidth
! ANNOTABLE_ARR_column

! Global output parameters:
! ANNOTABLE_ARR_table


! Calculate resolution-dependent parameters
g_annocharwidth,'ANNOTABLE_VAR_charWidth'
ar21= ANNOTABLE_VAR_charWidth*0.5
ar24=ANNOTABLE_VAR_charWidth*0.3
ar31=ANNOTABLE_VAR_charWidth*0.35  ! Y offset applied to annotation so that no characters
                                   ! (like underscore) are below baseline
ar22=ANNOTABLE_VAR_charWidth*1.6+2*ar24

! Check if column headers were provided
ar33=0
parverify,,ARG3,'STR_ARR'
*get,ar20,parm,ARG3,type
*if,ar20,eq,3,then
    *get,ar20,parm,%ARG3%,type
    *if,ar20,eq,5,then
        ar33=1
    *endif
*endif

! Check if row labels were provided
ar32=0
*get,ar20,parm,ARG2,type
*if,ar20,eq,3,then
    *get,ar20,parm,%ARG2%,type
    *if,ar20,eq,5,then
        ar32=1
    *endif
*endif

! Get size of data table
*get,ar25,parm,%ARG1%,dim,y
*get,ar26,parm,%ARG1%,dim,z

! Calculate table's total number of rows and columns
ar27=ar25+ar33
ar28=ar26+ar32

! Calculate data row offset
ar29=1+ar33
ar30=1+ar32

! Create table
*del,ANNOTABLE_ARR_table,,nopr
*dim,ANNOTABLE_ARR_table,string,248,ar27,ar28

! Set header/label intersection field
*if,ar33,eq,1,and,ar32,eq,1,then
    ANNOTABLE_ARR_table(1,1,1)=' '
*endif

! Fill table with column headers
*if,ar33,eq,1,then
    *do,ar43,1,ar26,1
        ar35=ar43+ar30-1
        ANNOTABLE_ARR_table(1,1,ar35)=%ARG3%(1,ar43)
    *enddo
*endif

! Fill table with row labels
*if,ar32,eq,1,then
    *do,ar42,1,ar25,1
        ar34=ar42+ar29-1
        ANNOTABLE_ARR_table(1,ar34,1)=%ARG2%(1,ar42)
    *enddo
*endif

! Fill table with data
*do,ar42,1,ar25,1
    ar34=ar42+ar29-1
    *do,ar43,1,ar26,1
        ar35=ar43+ar30-1
        ANNOTABLE_ARR_table(1,ar34,ar35)=%ARG1%(1,ar42,ar43)
    *enddo
*enddo

! Calculate column widths
*del,ANNOTABLE_ARR_colWidths,,nopr
*dim,ANNOTABLE_ARR_colWidths,,ar28
*do,ar43,1,ar28,1
    ar38=0
    *do,ar42,1,ar27,1
        ar39=ANNOTABLE_ARR_table(1,ar42,ar43)
        ar37=strleng(ar39)
        ar38=(ar38>ar37)
    *enddo
    ar23=ar38*ANNOTABLE_VAR_charWidth+2*ar21
    ANNOTABLE_ARR_colWidths(ar43)=ar23
*enddo

! Calculate row heights
*del,ANNOTABLE_ARR_rowHeights,,nopr
*dim,ANNOTABLE_ARR_rowHeights,,ar27
*vfill,ANNOTABLE_ARR_rowHeights,ramp,ar22,0

! Calculate overall table size
*vscfun,ar41,sum,ANNOTABLE_ARR_colWidths
*vscfun,ar40,sum,ANNOTABLE_ARR_rowHeights
ar46=ARG6+ar40

! Draw table grid lines
annogrid,ARG5,ARG6,'ANNOTABLE_ARR_rowHeights','ANNOTABLE_ARR_colWidths'

! Draw annotations, column by column
ar44=ARG5
*do,ar43,1,ar28,1
    ! Get column width
    ar23=ANNOTABLE_ARR_colWidths(ar43)
    ! Copy column data to 1-D array
    *del,ANNOTABLE_ARR_column,,nopr
    *dim,ANNOTABLE_ARR_column,string,248,ar27
    *do,ar42,1,ar27,1
        ANNOTABLE_ARR_column(1,ar42)=ANNOTABLE_ARR_table(1,ar42,ar43)
    *enddo
    ! Account for margin in calculating text position
    ar45=ar44+ar21
    ! Create annotations
    annotxtarray,'ANNOTABLE_ARR_column',ar45,ar46-ar22+ar24+ar31,-ar22,'Y',ar23-2*ar21,ARG7
    ! Update horizontal position
    ar44=ar44+ar23
*enddo

! Strike top left cell when column headers and row labels exist
*if,ar33,eq,1,and,ar32,eq,1,then
    /anum,,4
    /line,ARG5,ar46,ARG5+ANNOTABLE_ARR_colWidths(1),ar46-ar22
*endif

! Create table title annotation
*get,ar20,parm,ARG4,type
*if,ar20,eq,3,then
    ar50=strleng(ARG4)
    ar51=ar50*ANNOTABLE_VAR_charWidth
    ar52=(ar41-ar51)/2
    ar55=ARG5+ar52
    ar56=ar46+ar24+ar31
    anno,ar55,ar56,ARG4
*endif

*del,ANNOTABLE_ARR_colWidths,,nopr
*del,ANNOTABLE_ARR_rowHeights,,nopr
*del,ANNOTABLE_ARR_labelRowHeights,,nopr
*del,ANNOTABLE_ARR_labelColWidths,,nopr
*del,ANNOTABLE_VAR_charWidth,,nopr
*del,ANNOTABLE_ARR_column,,nopr


