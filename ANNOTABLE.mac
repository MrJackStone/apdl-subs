! ANNOTABLE, data_values, row_labels, column_headers, tableTitle, xllc, yllc, cellAlignment
! ANNOTABLE,        arg1,       arg2,           arg3,       arg4, arg5, arg6,          arg7

! Description:
! Draws a table filled with data passed as arrays of characters.

! Arguments:
! arg1: data_values    -  2D array parameter of strings with value of every data field of the table.
!                         An array of chars can also be provided (will be converted to string array)
! arg2: row_labels     -  array parameter of strings with label of each row (optional).
!                         An array of chars can also be provided (will be converted to string array)
! arg3: column_headers -  array parameter of strings with header of each column (optional).
!                         An array of chars can also be provided (will be converted to string array)
! arg4: tableTitle     -  table's title, written above it (optional)
! arg5: xllc           -  X coordinate (in window display units) of the table's lower left corner
!                         (defaults to 0.0)
! arg6: yllc           -  Y coordinate (in window display units) of the table's lower left corner
!                        (defaults to 0.0)
! arg7: cellAlignment  -  horizontal placement of text within each cell:
!                            [0] left-justified
!                            [1] centered
!                            [2] right-justified

! Local parameters:
! AR20: parType
! AR21: horizontalMargin
! AR22: rowHeight
! AR23: colWidth
! AR24: verticalMargin
! AR25: dataRowCount
! AR26: dataColCount
! AR27: tableRowCount
! AR28: tableColCount
! AR29: firstDataRow
! AR30: firstDataCol
! AR31: verAdjustment
! AR32: hasRowLabels
! AR33: hasColumnHeaders
! AR34: correspTableRow
! AR35: correspTableCol
! AR37: charCount
! AR38: maxCharCount
! AR39: string
! AR40: totalHeight
! AR41: totalWidth
! AR42: nthRow
! AR43: nthCol
! AR44: xprev
! AR45: xNthCell
! AR46: ymax
! AR50: titleCharCount
! AR51: titleWidth
! AR52: titleLeftPadding
! AR55: xTitle
! AR56: yTitle

! Global parameters (erased at the end of this subroutine):
! ANNOTABLE_ARR_colWidths
! ANNOTABLE_ARR_rowHeights
! ANNOTABLE_ARR_labelRowHeights
! ANNOTABLE_ARR_labelColWidths
! ANNOTABLE_VAR_charWidth
! ANNOTABLE_ARR_column

! Global output parameters:
! ANNOTABLE_ARR_table


! Calculate resolution-dependent parameters
g_annocharwidth,'ANNOTABLE_VAR_charWidth'
AR21= ANNOTABLE_VAR_charWidth*0.5
AR24=ANNOTABLE_VAR_charWidth*0.3
AR31=ANNOTABLE_VAR_charWidth*0.35  ! Y offset applied to annotation so that no characters
                                   ! (like underscore) are below baseline
AR22=ANNOTABLE_VAR_charWidth*1.6+2*AR24

! Check if column headers were provided
AR33=0
parverify,,arg3,'STR_ARR'
*get,AR20,parm,arg3,type
*if,AR20,eq,3,then
    *get,AR20,parm,%arg3%,type
    *if,AR20,eq,5,then
        AR33=1
    *endif
*endif

! Check if row labels were provided
AR32=0
*get,AR20,parm,arg2,type
*if,AR20,eq,3,then
    *get,AR20,parm,%arg2%,type
    *if,AR20,eq,5,then
        AR32=1
    *endif
*endif

! Get size of data table
*get,AR25,parm,%arg1%,dim,y
*get,AR26,parm,%arg1%,dim,z

! Calculate table's total number of rows and columns
AR27=AR25+AR33
AR28=AR26+AR32

! Calculate data row offset
AR29=1+AR33
AR30=1+AR32

! Create table
*del,ANNOTABLE_ARR_table,,nopr
*dim,ANNOTABLE_ARR_table,string,248,AR27,AR28

! Set header/label intersection field
*if,AR33,eq,1,and,AR32,eq,1,then
    ANNOTABLE_ARR_table(1,1,1)=' '
*endif

! Fill table with column headers
*if,AR33,eq,1,then
    *do,AR43,1,AR26,1
        AR35=AR43+AR30-1
        ANNOTABLE_ARR_table(1,1,AR35)=%arg3%(1,AR43)
    *enddo
*endif

! Fill table with row labels
*if,AR32,eq,1,then
    *do,AR42,1,AR25,1
        AR34=AR42+AR29-1
        ANNOTABLE_ARR_table(1,AR34,1)=%arg2%(1,AR42)
    *enddo
*endif

! Fill table with data
*do,AR42,1,AR25,1
    AR34=AR42+AR29-1
    *do,AR43,1,AR26,1
        AR35=AR43+AR30-1
        ANNOTABLE_ARR_table(1,AR34,AR35)=%arg1%(1,AR42,AR43)
    *enddo
*enddo

! Calculate column widths
*del,ANNOTABLE_ARR_colWidths,,nopr
*dim,ANNOTABLE_ARR_colWidths,,AR28
*do,AR43,1,AR28,1
    AR38=0
    *do,AR42,1,AR27,1
        AR39=ANNOTABLE_ARR_table(1,AR42,AR43)
        AR37=strleng(AR39)
        AR38=(AR38>AR37)
    *enddo
    AR23=AR38*ANNOTABLE_VAR_charWidth+2*AR21
    ANNOTABLE_ARR_colWidths(AR43)=AR23
*enddo

! Calculate row heights
*del,ANNOTABLE_ARR_rowHeights,,nopr
*dim,ANNOTABLE_ARR_rowHeights,,AR27
*vfill,ANNOTABLE_ARR_rowHeights,ramp,AR22,0

! Calculate overall table size
*vscfun,AR41,sum,ANNOTABLE_ARR_colWidths
*vscfun,AR40,sum,ANNOTABLE_ARR_rowHeights
AR46=arg6+AR40

! Draw table grid lines
annogrid,arg5,arg6,'ANNOTABLE_ARR_rowHeights','ANNOTABLE_ARR_colWidths'

! Draw annotations, column by column
AR44=arg5
*do,AR43,1,AR28,1
    ! Get column width
    AR23=ANNOTABLE_ARR_colWidths(AR43)
    ! Copy column data to 1-D array
    *del,ANNOTABLE_ARR_column,,nopr
    *dim,ANNOTABLE_ARR_column,string,248,AR27
    *do,AR42,1,AR27,1
        ANNOTABLE_ARR_column(1,AR42)=ANNOTABLE_ARR_table(1,AR42,AR43)
    *enddo
    ! Account for margin in calculating text position
    AR45=AR44+AR21
    ! Create annotations
    annotxtarray,'ANNOTABLE_ARR_column',AR45,AR46-AR22+AR24+AR31,-AR22,'Y',AR23-2*AR21,arg7
    ! Update horizontal position
    AR44=AR44+AR23
*enddo

! Strike top left cell when column headers and row labels exist
*if,AR33,eq,1,and,AR32,eq,1,then
    /anum,,4
    /line,arg5,AR46,arg5+ANNOTABLE_ARR_colWidths(1),AR46-AR22
*endif

! Create table title annotation
*get,AR20,parm,arg4,type
*if,AR20,eq,3,then
    AR50=strleng(arg4)
    AR51=AR50*ANNOTABLE_VAR_charWidth
    AR52=(AR41-AR51)/2
    AR55=arg5+AR52
    AR56=AR46+AR24+AR31
    anno,AR55,AR56,arg4
*endif

*del,ANNOTABLE_ARR_colWidths,,nopr
*del,ANNOTABLE_ARR_rowHeights,,nopr
*del,ANNOTABLE_ARR_labelRowHeights,,nopr
*del,ANNOTABLE_ARR_labelColWidths,,nopr
*del,ANNOTABLE_VAR_charWidth,,nopr
*del,ANNOTABLE_ARR_column,,nopr


