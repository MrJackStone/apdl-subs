! sprsup , lx   , ly   , lz   , mat  , real , type , cmnName , cmeName , calcApportioned , coupledDOFs , apport_array
! SPRSUP , ARG1 , ARG2 , ARG3 , ARG4 , ARG5 , ARG6 , ARG7    , ARG8    , ARG9            , AR10        , AR11

! Description:
! Creates spring supports connected to currently selected nodes.

! Arguments:
! ARG1: lx               -  spring length along X direction
! ARG2: ly               -  spring length along Y direction
! ARG3: lz               -  spring length along Z direction
! ARG4: mat              -  material index
! ARG5: real             -  real constant index
! ARG6: type             -  element type index
! ARG7: cmnName          -  name of selection component containing created nodes
! ARG8: cmeName          -  name of selection component containing created elements
! ARG9: calcApportioned  -  determines whether or not to scale spring length to keep stiffness
!                           constant based on nodal apportioned areas:
!                              [0] do not scale (all springs will have the same length)
!                              [1] scale (apportioned areas will be calculated in this macro)
!                              [2] scale (use apportioned areas provided through AR11)
! AR10: coupledDOFs      -  determines which degrees of freedom to couple between each spring's
!                           nodes:
!                              [0] no coupling
!                              [1] UX
!                              [2] UY
!                              [3] UX & UY
!                              [4] UZ
!                              [5] UX & UZ
!                              [6] UY & UZ
!                              [7] UX, UY & UZ
! AR11: apport_array     -  name of Nx2 array containing node numbers (?,1) and their corresponding
!                           apportioned areas (?,2).
!                           This argument is required if ARG9=2 and disregarded otherwise.
!                           This argument should be provided when computational efficiency is a
!                           concern, since it prevents this macro from recalculating previously
!                           obtained apportioned areas every time it is called.

! Local parameters:
! ar20: parType
! ar21: nc
! ar41: arrayRowCount
! ar42: arrayColCount
! ar43: validApportArray


! Parse inputs
ar47 = 'SPRSUP_COMPN_supports'
*get,ar20,parm,ARG7,type
*if,ar20,eq,3,then
  ar47 = ARG7
*endif

ar48 = 'SPRSUP_COMPE_springs'
*get,ar20,parm,ARG8,type
*if,ar20,eq,3,then
  ar48 = ARG8
*endif

*if,ARG9,eq,2,then
  ar43 = 0
  *get,ar20,parm,AR11,type
  *if,ar20,eq,3,then
    *get,ar20,parm,%AR11%,type
    *if,ar20,eq,1,then
      *get,ar41,parm,%AR11%,dim,x
      *get,ar42,parm,%AR11%,dim,y
      *if,ar41,ge,1,and,ar42,ge,2,then
        ar43 = 1
      *endif
    *endif
  *endif

  *if,ar43,eq,0,then
    *msg,error
SPRSUP error: invalid nodal apportioned area array passed through AR11.%/&
When ARG9=2 a predefined Nx2 array with node numbers & corresponding apportioned areas is required.%/&
SPRSUP command is ignored.
    *return,-1
  *endif
*endif

! Prepare environment
nbackup
ebackup

*del , SPRSUP_ARR_nnum_apport ,  , nopr
*del , SPRSUP_ARR_apportioned ,  , nopr
*del , SPRSUP_ARR_base_nodes  ,  , nopr
*del , SPRSUP_ARR_new_nodes   ,  , nopr
*del , SPRSUP_ARR_nsel_mask   ,  , nopr
*del , SPRSUP_ARR_base_x      ,  , nopr
*del , SPRSUP_ARR_base_y      ,  , nopr
*del , SPRSUP_ARR_base_z      ,  , nopr
*del , SPRSUP_ARR_new_x       ,  , nopr
*del , SPRSUP_ARR_new_y       ,  , nopr
*del , SPRSUP_ARR_new_z       ,  , nopr
*del , SPRSUP_ARR_scaled_LX   ,  , nopr
*del , SPRSUP_ARR_scaled_LY   ,  , nopr
*del , SPRSUP_ARR_scaled_LZ   ,  , nopr

*get,ar21,node,,count

! Obtain node numbers and corresponding apportioned areas
*if,ARG9,eq,0,then
  ! Ignore apportioned areas
  *dim,SPRSUP_ARR_apportioned,,ar21
  *vfill,SPRSUP_ARR_apportioned,ramp,1,0
  *vget,SPRSUP_ARR_base_nodes,node,,nlist

*elseif,ARG9,eq,1,then
  ! Calculate apportioned areas
  apportionedstats,,'SPRSUP_ARR_nnum_apport'
  *vfun , SPRSUP_ARR_base_nodes  , copy , SPRSUP_ARR_nnum_apport(1,1)
  *vfun , SPRSUP_ARR_apportioned , copy , SPRSUP_ARR_nnum_apport(1,2)

*elseif,ARG9,eq,2,then
  ! Apportioned areas previously calculated
  *dim,SPRSUP_ARR_nsel_mask,,ar41
  *get,SPRSUP_ARR_nsel_mask(1:ar41),node,%AR11%(1:ar41,1),nsel

  *vmask , SPRSUP_ARR_nsel_mask
  *vfun  , SPRSUP_ARR_base_nodes  , comp , %AR11%(1,1)
  *vmask , SPRSUP_ARR_nsel_mask
  *vfun  , SPRSUP_ARR_apportioned , comp , %AR11%(1,2)

*endif

! Calculate positions
*vget , SPRSUP_ARR_base_x , node ,  , loc , x
*vget , SPRSUP_ARR_base_y , node ,  , loc , y
*vget , SPRSUP_ARR_base_z , node ,  , loc , z

*voper , SPRSUP_ARR_scaled_LX , ARG1 , div , SPRSUP_ARR_apportioned
*voper , SPRSUP_ARR_scaled_LY , ARG2 , div , SPRSUP_ARR_apportioned
*voper , SPRSUP_ARR_scaled_LZ , ARG3 , div , SPRSUP_ARR_apportioned

*voper , SPRSUP_ARR_new_x , SPRSUP_ARR_base_x , add , SPRSUP_ARR_scaled_LX
*voper , SPRSUP_ARR_new_y , SPRSUP_ARR_base_y , add , SPRSUP_ARR_scaled_LY
*voper , SPRSUP_ARR_new_z , SPRSUP_ARR_base_z , add , SPRSUP_ARR_scaled_LZ

! Create springs
mat  , ARG4
real , ARG5
type , ARG6

nextnd,'SPRSUP_ARR_new_nodes',ar21

n , SPRSUP_ARR_new_nodes(1:ar21)  , SPRSUP_ARR_new_x(1:ar21)     , SPRSUP_ARR_new_y(1:ar21) , SPRSUP_ARR_new_z(1:ar21)
e , SPRSUP_ARR_base_nodes(1:ar21) , SPRSUP_ARR_new_nodes(1:ar21)

! Couple DOFs
*if,mod(AR10,2),eq,1,then
  cp,next,'UX',SPRSUP_ARR_new_nodes(1:ar21),SPRSUP_ARR_base_nodes(1:ar21)
*endif

*if,AR10,ge,2,then
  *if,AR10,ne,4,and,AR10,ne,5,then
    cp,next,'UY',SPRSUP_ARR_new_nodes(1:ar21),SPRSUP_ARR_base_nodes(1:ar21)
  *endif
*endif

*if,AR10,ge,4,then
  cp,next,'UZ',SPRSUP_ARR_new_nodes(1:ar21),SPRSUP_ARR_base_nodes(1:ar21)
*endif

! Create exported components
nsel,none
nsel,a,node,,SPRSUP_ARR_new_nodes(1:ar21)
cm,%ar47%,node

esel,none
esln,s,0
cm,%ar48%,node

! Clean up
nrestore
elrestore
cmsel,a,%ar47%
cmsel,a,%ar48%

*del , SPRSUP_ARR_nnum_apport ,  , nopr
*del , SPRSUP_ARR_apportioned ,  , nopr
*del , SPRSUP_ARR_base_nodes  ,  , nopr
*del , SPRSUP_ARR_new_nodes   ,  , nopr
*del , SPRSUP_ARR_nsel_mask   ,  , nopr
*del , SPRSUP_ARR_base_x      ,  , nopr
*del , SPRSUP_ARR_base_y      ,  , nopr
*del , SPRSUP_ARR_base_z      ,  , nopr
*del , SPRSUP_ARR_new_x       ,  , nopr
*del , SPRSUP_ARR_new_y       ,  , nopr
*del , SPRSUP_ARR_new_z       ,  , nopr
*del , SPRSUP_ARR_scaled_LX   ,  , nopr
*del , SPRSUP_ARR_scaled_LY   ,  , nopr
*del , SPRSUP_ARR_scaled_LZ   ,  , nopr
