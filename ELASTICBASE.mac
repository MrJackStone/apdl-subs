! elasticbase , output , direction , stiffness , tenskey , refL , refE , refA , coupledDOFs , cmnName , cmeName , apport_array
! ELASTICBASE , ARG1   , ARG2      , ARG3      , ARG4    , ARG5 , ARG6 , ARG7 , ARG8        , ARG9    , AR10    , AR11

! Description:
! Creates an elastic base of a given stiffness composed of discrete spring elements aligned with
! global X, Y, or Z axis.

! Arguments:
! arg1: output       -  name of array parameter to which the following data will be written:
!                         POS CONTENTS
!                         (1) material ID assigned to spring elements
!                         (2) real constant set ID assigned to spring elements
!                         (3) element type ID assigned to spring elements
!                         (4) adopted length
!                         (5) adopted elastic modulus
!                         (6) adopted cross-sectional area
!                         (7) average apportioned area
! arg2: direction    -  direction of the spring elements (must be 'X', 'Y', or 'Z')
! arg3: stiffness    -  elastic base's stiffness per unit area (N/mÂ²)
! arg4: tenskey      -  LINK180's TENSKEY option:
!                         [ 0] Tension & compression (default)
!                         [ 1] Tension only (tendon)
!                         [-1] Compression only (strut)
! arg5: refL         -  spring element length for average apportioned area (defaults to 1
!                       length unit). The sign of this number determines whether the spring
!                       is created "ahead" of the reference nodes (i.e., towards an increasing
!                       value of the chosen XYZ coordinate) or "behind" them (towards a
!                       decreasing value of the coordinate)
! arg6: refE         -  elastic modulus of the material assigned to the springs. This value
!                       can be zero, in which case it is automaticall calculated based on the
!                       cross-sectional area
! arg7: refA         -  cross-sectional area of the spring elements created. This value is
!                       only used if arg6 (refElasticModulus) is zero
! arg8: coupledDOFs  -  determines which degrees of freedom to couple between each spring's
!                       nodes:
!                         [0] no coupling
!                         [1] UX
!                         [2] UY
!                         [3] UX & UY
!                         [4] UZ
!                         [5] UX & UZ
!                         [6] UY & UZ
!                         [7] UX, UY & UZ
! arg9: cmnName      -  name of nodal selection component containing created nodes
!                       (defaults to ELASTICBASE_COMPN_new)
! ar10: cmeName      -  name of element selection component containing created elements
!                       (defaults to ELASTICBASE_COMPE_new)
! AR11: apport_array -  name of Nx2 array containing node numbers (?,1) and their corresponding
!                       apportioned areas (?,2).
!                       If blank, defaults to 'ELASTICBASE_ARR_apport_areas' and apportioned areas are
!                       then calculated inside this macro. This argument should be provided when
!                       computational efficiency is a concern, since it avoids recalculating nodal
!                       apportioned areas every subsequent time ELASTICBASE is executed.


! Local parameters:
! AR20: parType
! AR21: maxType
! AR22: maxReal
! AR23: maxMat
! AR24: meanApportionedArea
! AR25: adoptedLength
! AR26: adoptedElasticModulus
! AR27: adoptedArea
! AR29: nodeComponent
! AR30: elementComponent
! AR31: newType
! AR32: newReal
! AR33: newMat
! AR34: meanUnitAxialStiffness
! AR41: xLength
! AR42: yLength
! AR43: zLength
! ar50: apportStatsName
! ar51: apportArrayName
! ar52: apportArrayNodeCount
! ar53: apportArrayColCount
! ar54: calculateApportAreas

! Global erased parameters:
! ELASTICBASE_ARR_apport_stats

! Global output parameters:
! %AR11% (defaults to 'ELASTICBASE_ARR_apport_areas')


! Parse inputs
*get,ar20,parm,ARG2,type
*if,ar20,ne,3,then
  *msg,error
ELASTICBASE error: ARG2 must be a string.%/&
ELASTICBASE command is ignored.
  *return,-1
*endif

*if,upcase(ARG2),ne,'X',and,upcase(ARG2),ne,'Y',then
  *if,upcase(ARG2),ne,'Z',then
    *msg,error
ELASTICBASE error: invalid direction. arg2 must be X, Y, or Z.%/&
ELASTICBASE command is ignored.
    *return,-1
  *endif
*endif

AR29 = 'ELASTICBASE_COMPN_new'
*get,AR20,parm,arg9,type
*if,AR20,eq,3,then
  AR29 = arg9
*endif

AR30 = 'ELASTICBASE_COMPE_new'
*get,AR20,parm,ar10,type
*if,AR20,eq,3,then
  AR30 = ar10
*endif

ar50 = 'ELASTICBASE_ARR_apport_stats'

ar51 = 'ELASTICBASE_ARR_apport_areas'
*get,ar20,parm,AR11,type
*if,ar20,eq,3,then
  ar51 = AR11
*endif

ar54 = 1
*get,ar20,parm,%ar51%,type
*if,ar20,eq,1,then
  *get,ar52,parm,%ar51%,dim,x
  *get,ar53,parm,%ar51%,dim,y
  *if,ar52,ge,1,and,ar53,ge,2,then
    ar54 = 0
  *endif
*endif


!! B.  Calculate spring attributes                                                                !!
! Spring reference length
ar25 = 1
*if,ARG5,ne,0,then
  ar25 = ARG5
*endif

! Calculate axial stiffness per unit area for calculated length
ar34 = abs(ar25)*ARG3

! Calculate elastic modulus and cross-sectional area
*if,ARG6,ne,0,then

  ! When elastic modulus is given
  ar26 = abs(ARG6)
  ar27 = ar34/ar26

*else

  ! When elastic modulus is not given
  *if,ARG7,ne,0,then
    ! When cross-sectional area is given
    ar27 = abs(ARG7)
    ar26 = ar34/ar27
  *else
    ! When neither elastic modulus nor cross-sectional area are given
    ar27 = (ar25**2)/100
    ar26 = ar34/ar27
  *endif

*endif

! Determine spring length in each direction
ar41 = 0
ar42 = 0
ar43 = 0
*if,upcase(ARG2),eq,'X',then
  ar41 = ar25
*elseif,upcase(ARG2),eq,'Y',then
  ar42 = ar25
*elseif,upcase(ARG2),eq,'Z',then
  ar43 = ar25
*endif

! Calculate apportioned areas
*if,ar54,eq,1,then
  apportionedstats,,ar51
*endif
*vscfun,ar24,mean,%ar51%(1,2)


!! C.  Create springs                                                                             !!
! New mesh attributes
ar31 = etyiqr(0,16)
ar32 = rlinqr(0,16)
ar33 = mpinqr(0,0,16)

! Create new attribute set: element type, real constant set, material
et , ar31 , link180
r  , ar32 , ar27    ,      , ARG4
mp , ex   , ar33    , ar26
mp , prxy , ar33    , 0.3

! Create discrete springs connected to current node selection
ar88 = ARG8
sprsup , ar41 , ar42 , ar43 , ar33 , ar32 , ar31 , ar29 , ar30 , 2 , ar88 , ar51
