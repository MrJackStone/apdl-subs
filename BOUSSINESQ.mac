! boussinesq , parmForces , parmNodes , nodeCount , forceValue , forcePosX , forcePosY , forcePosZ , stressDir , gravDir , apport_array , dynFct
! BOUSSINESQ , ARG1       , ARG2      , ARG3      , ARG4       , ARG5      , ARG6      , ARG7      , ARG8      , ARG9    , AR10         , AR11

! Description:
! Calculates through the Boussinesq soil stress increase propagation formula nodal forces for
! currently selected nodes caused by a a point load at a remote location in 3-D space.
! Optionally, AREMA load impact coefficient (which varies with depth) can be applied when
! calculating nodal forces.

! Arguments:
! ARG1: parmForces    -  name of array parameter to which nodal forces will be assigned
!                        (defaults to 'BOUSSINESQ_ARR_forces')
! ARG2: parmNodes     -  name of array parameter to which node numbers will be assigned
!                        (defaults to 'BOUSSINESQ_ARR_nodes')
! ARG3: nodeCount     -  name of array parameter to which node selection count will be assigned
!                        (defaults to 'BOUSSINESQ_VAR_nc')
! ARG4: forceValue    -  value of the remote force (presumably applied at surface level)
! ARG5: forcePosX     -  X coordinate of the remote force's location
! ARG6: forcePosY     -  Y coordinate of the remote force's location
! ARG7: forcePosZ     -  Z coordinate of the remote force's location
! ARG8: stressDir     -  stress increase direction key:
!                          ['H']  horizontal stress increase
!                          ['V']  vertical stress increase
! ARG9: gravDir       -  cartesian axis aligned with gravitational acceleration (vertical)
!                          'X', 'Y', or 'Z'
! AR10: apport_array  -  name of Nx2 array containing node numbers (?,1) and their corresponding
!                        apportioned areas (?,2).
!                        If blank, defaults to 'BOUSSINESQ_ARR_apport_areas' and apportioned areas
!                        are then calculated inside this macro. This argument should be provided
!                        when computational efficiency is a concern, since it avoids recalculating
!                        nodel apportioned areas every subsequent time BOUSSINESQ is executed.
! AR11: dynFct        -  determines whether or not to apply dynamic impact factor
!                          ['OFF']    no impact factor applied (default)
!                          ['AREMA']  calculate impact factor as per AREMA (chapter 8)

! Local parameters:
! ar20: parType
! ar21: parmNameNF
! ar22: parmNameNN
! ar23: parmNameNC
! ar28: gravityDir
! ar29: boussinesqDir
! ar30: parmNameApport
! ar31: includeAREMAimpactFactor
! ar32: nthNode
! ar33: nodeNum
! ar34: calculateApportioned
! ar35: pi
! ar40: nodes_all
! ar41: nodes_selStatus
! ar42: nodes_x
! ar43: nodes_y
! ar44: nodes_z
! ar45: delta_x
! ar46: delta_y
! ar47: delta_z
! ar48: delta_x_squared
! ar49: delta_y_squared
! ar50: delta_z_squared
! ar51: vertical_distances
! ar52: direct_3d_distances
! ar53: R_squared
! ar54: radial_distances
! ar55: dynamic_impact_coefficients
! ar56: nodal_pressures
! ar57: nodal_forces


! Parse inputs
ar21 = 'BOUSSINESQ_ARR_forces'
*get,ar20,parm,ARG1,type
*if,ar20,eq,3,then
  ar21 = ARG1
*endif

ar22 = 'BOUSSINESQ_ARR_nodes'
*get,ar20,parm,ARG2,type
*if,ar20,eq,3,then
  ar22 = ARG2
*endif

ar23 = 'BOUSSINESQ_ARR_nc'
*get,ar20,parm,ARG3,type
*if,ar20,eq,3,then
  ar23 = ARG3
*endif

*if,ARG4,eq,0,then
  *msg,warn
BOUSSINESQ warning: null force applied.%/&
BOUSSINESQ command is ignored.
  *return,-1
*endif

*get,ar20,parm,ARG8,type
*if,ar20,ne,3,then
  *msg,error
BOUSSINESQ error: expected ARG8 to be a string.%/&
BOUSSINESQ command is ignored.
  *return,-1
*endif

ar28 = upcase(ARG8)
*if,ar28,ne,'X',then
  *if,ar28,ne,'Y',then
    *if,ar28,ne,'Z',then
      *msg,error
BOUSSINESQ error: expected ARG8 to be the name of a cartesian axis (X, Y, or Z).%/&
BOUSSINESQ command is ignored.
      *return,-1
    *endif
  *endif
*endif

*get,ar20,parm,ARG9,type
*if,ar20,ne,3,then
  *msg,error
BOUSSINESQ error: expected ARG9 to be a string.%/&
BOUSSINESQ command is ignored.
  *return,-1
*endif

ar29 = upcase(ARG9)
*if,ar29,ne,'H',then
  *if,ar28,ne,'V',then
    *msg,error
BOUSSINESQ error: expected ARG9 to be either H (horizontal) or V (vertical).%/&
BOUSSINESQ command is ignored.
    *return,-1
  *endif
*endif

ar30 = 'BOUSSINESQ_ARR_apport_areas'
*get,ar20,parm,AR10,type
*if,ar20,eq,3,then
  ar30 = AR10
*endif

ar34 = 1
*get,ar20,parm,%ar30%,type
*if,ar20,eq,1,then
  *get,ar52,parm,%ar30%,dim,x
  *get,ar53,parm,%ar30%,dim,y
  *if,ar52,ge,1,and,ar53,ge,2,then
    ar34 = 0
  *endif
*endif

ar31 = 0
*get,ar20,parm,AR11,type
*if,ar20,eq,3,then
  *if,upcase(AR11),eq,'AREMA',then
    ar31 = 1
  *endif
*endif

! Prepare environment
afunbackup
*afun,rad
ar35 = acos(-1)
afunrestore

*del , %ar21% ,  , nopr
*del , %ar22% ,  , nopr
*del , ar40   ,  , nopr
*del , ar41   ,  , nopr
*del , ar42   ,  , nopr
*del , ar43   ,  , nopr
*del , ar44   ,  , nopr
*del , ar45   ,  , nopr
*del , ar46   ,  , nopr
*del , ar47   ,  , nopr
*del , ar48   ,  , nopr
*del , ar49   ,  , nopr
*del , ar50   ,  , nopr
*del , ar53   ,  , nopr
*del , ar54   ,  , nopr
*del , ar56   ,  , nopr
*del , ar57   ,  , nopr
*del , ar55   ,  , nopr
*del , ar51   ,  , nopr
*del , ar52   ,  , nopr

! Extract nodal data
*vget , ar40 , node ,  , nlist
*vget , ar41 , node ,  , nsel
*vget , ar42 , node ,  , loc   , x
*vget , ar43 , node ,  , loc   , y
*vget , ar44 , node ,  , loc   , z

*get , %ar23% , parm , ar40 , dim , x

*vmask , ar41
*vfun  , %ar22% , comp , ar40

*if,ar34,eq,1,then
  *del,%ar30%,,nopr
  *dim,%ar30%,,%ar23%
  *do,ar32,1,%ar23%,1
    ar33         = ar40(ar32)
    %ar30%(ar32) = arnode(ar33)
  *enddo
*endif

! Calculate Boussinesq distances
*voper , ar45 , ARG5 , sub , ar42
*voper , ar46 , ARG6 , sub , ar43
*voper , ar47 , ARG7 , sub , ar44

*vfun , ar48 , pwr , ar45 , 2
*vfun , ar49 , pwr , ar46 , 2
*vfun , ar50 , pwr , ar47 , 2

*voper , ar52 , ar48 , add  , ar49
*voper , ar52 , ar52 , add  , ar50
*vfun  , ar52 , sqrt , ar52

*if,ar29,eq,'X',then
  *vfun  , ar51 , copy , ar45
  *voper , ar53 , ar49 , add  , ar50
*elseif,ar29,eq,'Y',then
  *vfun  , ar51 , copy , ar46
  *voper , ar53 , ar48 , add  , ar50
*elseif,ar29,eq,'Z',then
  *vfun  , ar51 , copy , ar47
  *voper , ar53 , ar48 , add  , ar49
*endif

*vfun , ar54 , sqrt , ar53

! Calculate impact coefficients (according to AREMA Chapter 8)
*if,ar31,eq,1,then
  ! AREMA formula: f = 1.0 <= 1.7060-0.2353*z <= 1.6
  *voper , ar55 , ar51 , mult , -0.2353
  *voper , ar55 , ar55 , add  , 1.7060
  *voper , ar55 , ar55 , max  , 1
  *voper , ar55 , ar55 , min  , 1.6
*else
  *vfill , ar55 , ramp , 1 , 0
*endif

! Calculate Boussinesq pressure increases
*if,ar28,eq,'V',then
  ! Boussinesq formula: q=-3*F/(2*PI*z²*(1+(R/z)²)^(5/2))
  *voper , ar56 , ar54 , div  , ar51
  *vfun  , ar56 , pwr  , ar56 , 2
  *voper , ar56 , ar56 , add  , 1
  *vfun  , ar56 , pwr  , ar56 , 5/2
  *voper , ar56 , ar56 , mult , ar51
  *voper , ar56 , ar56 , mult , ar51
  *voper , ar56 , ar56 , mult , 2*ar35
  *vfun  , ar56 , pwr  , ar56 , -1
  *voper , ar56 , ar56 , mult , 3*ARG4

*elseif,ar28,eq,'H',then
  ! Boussinesq formula: 6*F*r²*z/(2*PI*D^5)
  *vfun  , ar56 , pwr  , ar52 , 5
  *voper , ar56 , ar56 , mult , 2*ar35
  *vfun  , ar56 , pwr  , ar56 , -1
  *voper , ar56 , ar56 , mult , ar51
  *voper , ar56 , ar56 , mult , ar53
  *voper , ar56 , ar56 , mult , 6*ARG4

*endif

! Calculate apportioned nodal forces and apply dynamic impact coefficient
*voper , ar57   , ar56 , mult , %ar30%
*voper , ar57   , ar57 , mult , ar55
*vmask , ar41
*vfun  , %ar21% , comp , ar57
