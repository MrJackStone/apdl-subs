! ARRCONCAT, output, arr1, arr2, arr3, arr4, arr5, arr6, arr7, arr8, arr9, arr10
! ARRCONCAT,   arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, ar10,  ar11

! Description:
! Concatenates up to ten arrays, passed to this subroutine by their names (strings).
! Scalars can also be passed, but must also be passed by their names (string).

! Arguments:
! arg1: output  -  name of output parameter (concatenated array)
! arg2: arr1    -  name of the 1st array
! arg3: arr2    -  name of the 2nd array
! arg4: arr3    -  name of the 3rd array
! arg5: arr4    -  name of the 4th array
! arg6: arr5    -  name of the 5th array
! arg7: arr6    -  name of the 6th array
! arg8: arr7    -  name of the 7th array
! arg9: arr8    -  name of the 8th array
! ar10: arr9    -  name of the 9th array
! ar11: ar10    -  name of the 10th array

! Local parameters:
! AR20: parType
! AR21: nthArg
! AR22: argName
! AR23: nthDim
! AR24: varName
! AR25: totalLen
! AR26: headIndex

! Global parameters (erased at the end of this subroutine):
! ARRCONCAT_ARR_argNames
! ARRCONCAT_ARR_dims
! ARRCONCAT_ARR_varNames


! Initialize: names of local parameters (subroutine arguments)
*del,ARRCONCAT_ARR_argNames
*dim,ARRCONCAT_ARR_argNames,char,10
ARRCONCAT_ARR_argNames(1)='arg2', 'arg3', 'arg4', 'arg5', 'arg6', 'arg7', 'arg8', 'arg9', 'ar10', 'ar11'

*del,ARRCONCAT_ARR_dims
*dim,ARRCONCAT_ARR_dims,,10

*del,ARRCONCAT_ARR_varNames
*dim,ARRCONCAT_ARR_varNames,string,248,10

! Loop over arguments, collect dimension of each array and name of each variable
*do,AR21,1,10,1
    AR22=ARRCONCAT_ARR_argNames(AR21)
    AR23=0

    ! Get type of argument
    *get,AR20,parm,%AR22%,type

    ! Check if the argument is a string
    *if,AR20,eq,3,then
        ! Get variable name inside argument
        AR24=%AR22%
        ARRCONCAT_ARR_varNames(1,AR21)=AR24

        ! Check if the string contains an array or scalar
        *get,AR20,parm,%AR24%,type

        *if,AR20,eq,1,then
            ! Case: string contains array
            *get,AR23,parm,%AR24%,dim,x
        *elseif,AR20,eq,0,then
            ! Case: string contains scalar
            AR23=-1
        *endif
    *endif

    ARRCONCAT_ARR_dims(AR21)=AR23
*enddo

! Calculate total size of output array
*vabs,,1
*vscfun,AR25,sum,ARRCONCAT_ARR_dims

! Initialize output array
*del,%arg1%
*dim,%arg1%,,AR25

! Initialize head index
AR26=1

! Loop over arguments: build output array
*do,AR22,1,10,1
    ! Get argument's size and variable name
    AR23=ARRCONCAT_ARR_dims(AR22)
    AR24=ARRCONCAT_ARR_varNames(1,AR22)

    ! Append contents of argument to output
    *if,AR23,eq,-1,then
        %arg1%(AR26)=%AR24%
    *elseif,AR23,ge,1,then
        *vfun,%arg1%(AR26),copy,%AR24%(1)
    *endif

    ! Increment head index
    AR26=AR26+abs(AR23)
*enddo

! Clear global parameters
*del,ARRCONCAT_ARR_argNames
*del,ARRCONCAT_ARR_dims
*del,ARRCONCAT_ARR_varNames

/eof

! TEST:

    ! LET:
    *dim,a1,,10
    *vfill,a1,ramp,1,1
    *dim,a2,,5
    *vfill,a2,ramp,-20,-1
    *del,s1
    s1=15
    *del,s2
    s2=0.95
    *del,varWithUpToThirtyTwoCharLongName
    *del,varWithUpToThirtyTwoCharLongName
    varWithUpToThirtyTwoCharLongName=0.36

    ! EXPECT:
    arrconcat,'output','a1','s1','a2','s2','varWithUpToThirtyTwoCharLongName'

    ! TO RETURN:
    *status,output
    ! $ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, -20, -21, -22, -23, -24, 0.95, 0.36]

