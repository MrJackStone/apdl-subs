! arr2pth, valuesArrName, itemName, tableColIndex
! ARR2PTH,          ARG1,     ARG2,          ARG3

! Description:
! Puts values of an array into the active path under a given label.

! Arguments:
! ARG1: valueArrName   -  name of the 1-D array parameter containing the values
! ARG2: itemName       -  label for these values in the path definition
! ARG3: tableColIndex  -  number of the column at which the values will be placed in the path table

! Local parameters:
! ar20: pathTableSize
! ar21: arrayLen
! ar22: copiedPositions
! ar23: nthPosition

! Global erased parameters:
! ARR2PTH_ARR_table
! ARR2PTH_ARR_labels
! ARR2PTH_ARR_points

! Output parameters:
! -


*del , ARR2PTH_ARR_table  ,  , nopr
*del , ARR2PTH_ARR_labels ,  , nopr
*del , ARR2PTH_ARR_points ,  , nopr

paget , ARR2PTH_ARR_table  , TABLE
paget , ARR2PTH_ARR_labels , LABEL
paget , ARR2PTH_ARR_points , POINTS

*get,ar20,path,,nval
*get,ar21,parm,%ARG1%,dim,x

*if,ar21,gt,ar20,then
  ar22 = ar20
  *msg,warn,ar21,ar20
ARR2PTH WARNING: array with %I positions truncated to fit in path of %I size.

*elseif,ar20,gt,ar21,then
  ar22 = ar21
  *msg,WARN,ar21,ar20
ARR2PTH WARNING: array with %I positions shorter than path of %I size.

*else
  ar22 = ar21
*endif

*do,ar23,1,ar22,1
  ARR2PTH_ARR_table(ar23,ARG3,1) = %ARG1%(ar23)
*enddo

ARR2PTH_ARR_labels(ARG3,1,1) = upcase(ARG2)

paput , ARR2PTH_ARR_points , points
paput , ARR2PTH_ARR_table  , table
paput , ARR2PTH_ARR_labels , label

*del , ARR2PTH_ARR_table  ,  , nopr
*del , ARR2PTH_ARR_labels ,  , nopr
*del , ARR2PTH_ARR_points ,  , nopr
