! arori , axis , orientation
! ARORI , ARG1 , ARG2

! Description:
! Makes selected areas point towards or against the orientation of a given axis in the active
! coordinate system.

! Arguments:
! ARG1: axis         -  determines cartesian axis to point towards or against:
!                         'X', 'Y', or 'Z'
! ARG2: orientation  -  determines where areas should point:
!                         [>0] point towards axis (default)
!                         [<0] point against axis

! Local parameters:
! ar20: parType
! ar21: sign
! ar22: COMPA_eligible
! ar23: areaCount
! ar24: nthArea
! ar25: anum
! ar26: orthoAxis
! ar27: planeHorAxis
! ar28: planeVerAxis
! ar30: lineCount
! ar31: l1
! ar32: l2
! ar33: nthLine
! ar34: k1
! ar35: k2
! ar36: COMPK_l1
! ar37: horMin
! ar38: verMin
! ar40: thisKP
! ar41: thisX
! ar42: thisY
! ar43: thisZ
! ar50: prevKP
! ar51: prevX
! ar52: prevY
! ar53: prevZ
! ar54: prevRelativeX
! ar55: prevRelativeY
! ar56: prevRelativeZ
! ar57: prevIdx
! ar60: nextKP
! ar61: nextX
! ar62: nextY
! ar63: nextZ
! ar64: nextRelativeX
! ar65: nextRelativeY
! ar66: nextRelativeZ
! ar67: nextIdx
! ar71: iComponent
! ar72: jComponent
! ar73: kComponent
! ar80: convexVertexNormalComponent

! Global erased parameters:
! ARORI_ARR_klist
! ARORI_VAR_thisIdx


! Parse inputs
ar21 = 1
*if,ARG2,ne,0,then
  ar21 = ARG2
*endif

*get,ar20,parm,ARG1,type
*if,ar20,ne,3,then
  *msg,error
ARORI error: expected ARG1 to be string representing axis.%/&
ARORI command ignored.
  *return,-1
*endif

ar26 = lwcase(ARG1)
*if,ar26,ne,'x',and,ar26,ne,'y',then
  *if,ar26,ne,'z',then
    *msg,error
ARORI error: expected ARG1 axis to be X, Y, or Z.%/&
ARORI command ignored.
    *return,-1
  *endif
*endif

! Prepare environment
smdbackup

! Determine in-plane axes for finding convex polygon vertex
*if,ar26,eq,'x',then
  ar27 = 'y'
  ar28 = 'z'
*elseif,ar26,eq,'y',then
  ar27 = 'z'
  ar28 = 'x'
*elseif,ar26,eq,'z',then
  ar27 = 'x'
  ar28 = 'y'
*endif

! Check each selected area:
cm,ar22,area
*get,ar23,area,,count
ar25 = 0

*do,ar24,1,ar23,1

  cmsel,s,ar22
  ar25 = arnext(ar25)
  asel,s,area,,ar25
  lsla
  *get,ar30,line,,count

  *del,ARORI_ARR_klist,,nopr
  *dim,ARORI_ARR_klist,,ar30

  ! List area's keypoints in the correct order, following area's loop
  *do,ar33,1,ar30-1,1
    *get , ar31 , area , ar25 , loop , 1 , line , ar33
    *get , ar32 , area , ar25 , loop , 1 , line , ar33+1

    lsel,s,line,,ar31
    ksll
    cm,ar36,kp

    lsel,s,line,,ar32
    ksll,r
    ar35 = kpnext(0)

    cmsel,s,ar36
    ksel,u,kp,,ar35
    ar34 = kpnext(0)

    ARORI_ARR_klist(ar33)   = ar34
    ARORI_ARR_klist(ar33+1) = ar35
  *enddo

  ! Find convex vertex and its neighbors
  ksel,none
  ksel,a,kp,,ARORI_ARR_klist(1:ar30)

  *get,ar37,kp,,mnloc,%ar27%

  ksel,r,loc,%ar27%,ar37
  *get,ar38,kp,,mnloc,%ar28%
  ksel,r,loc,%ar28%,ar38
  ar40 = kpnext(0)

  arrfind , 'ARORI_VAR_thisIdx' , 'ARORI_ARR_klist' , ar40 , 1e-3
  ar57 = mod(ar30+ARORI_VAR_thisIdx-2,ar30)+1
  ar67 = mod(ARORI_VAR_thisIdx,ar30)+1

  ar50 = ARORI_ARR_klist(ar57)
  ar60 = ARORI_ARR_klist(ar67)

  ! Calculate relative coordinates of previous and next keypoints
  ar41 = kx(ar40)
  ar42 = ky(ar40)
  ar43 = kz(ar40)

  ar51 = kx(ar50)
  ar52 = ky(ar50)
  ar53 = kz(ar50)

  ar61 = kx(ar60)
  ar62 = ky(ar60)
  ar63 = kz(ar60)

  ar54 = ar51-ar41
  ar55 = ar52-ar42
  ar56 = ar53-ar43

  ar64 = ar61-ar41
  ar65 = ar62-ar42
  ar66 = ar63-ar43

  ! Calculate cross-product
  ar71 = (ar65*ar56)-(ar66*ar55)
  ar72 = (ar66*ar54)-(ar64*ar56)
  ar73 = (ar64*ar55)-(ar65*ar54)

  *if,ar26,eq,'x',then
    ar80 = ar71
  *elseif,ar26,eq,'y',then
    ar80 = ar72
  *elseif,ar26,eq,'z',then
    ar80 = ar73
  *endif

  ! Reverse area, if necessary
  *if,ar80*ar21,lt,0,then
    areverse,ar25
  *endif

*enddo

! Clean up
*del , ARORI_ARR_klist   ,  , nopr
*del , ARORI_VAR_thisIdx ,  , nopr
smdrestore
